# -*- coding: utf-8 -*-
"""
Created on Mon Jan  2 15:00:30 2017

@author: odin
"""

#==============================================================================
#Pandas read_csv dtype leading zeros#
#pd.read_csv('filename.csv', dtype={'leading_zero_column_name': object})
df=pd.read_excel(file_name,encoding='gbk',converters={'PO Line Number': lambda x: str(x)})
#==============================================================================

#==============================================================================
# Saving a DataFrame to a Python dictionary
dictionary = df.to_dict()
#==============================================================================


#==============================================================================
# dataframe to list#
#==============================================================================
df = pd.DataFrame({'a':[1,3,5,7,4,5,6,4,7,8,9],
                   'b':[3,5,6,2,4,6,7,8,7,8,9]})
df['a'].values.tolist()
df.values.tolist()
df['a'].tolist()
df['a'].drop_duplicates().values.tolist()
list(set(df['a']))

#==============================================================================
# List unique values
df.name.unique()
#==============================================================================


#==============================================================================
# Create a Dataframe
df = pd.DataFrame(np.random.randn(4, 5), columns=['A', 'B', 'C', 'D', 'E'])
#          A         B         C         D         E
#0  0.673092  0.230338 -0.171681  0.312303 -0.184813
#1 -0.504482 -0.344286 -0.050845 -0.811277 -0.298181
#2  0.542788  0.207708  0.651379 -0.656214  0.507595
#3 -0.249410  0.131549 -2.198480 -0.437407  1.628228
#计算各列数据总和并作为新列添加到末尾
#Calculate the sum of each column of data and add it as a new column to the end

df['Col_sum'] = df.apply(lambda x: x.sum(), axis=1)
#计算各行数据总和并作为新行添加到末尾
#Calculate the sum of each row of data and add it as a new line to the end
df.loc['Row_sum'] = df.apply(lambda x: x.sum())
#                A         B         C         D         E   Col_sum
#0        0.673092  0.230338 -0.171681  0.312303 -0.184813  0.859238
#1       -0.504482 -0.344286 -0.050845 -0.811277 -0.298181 -2.009071
#2        0.542788  0.207708  0.651379 -0.656214  0.507595  1.253256
#3       -0.249410  0.131549 -2.198480 -0.437407  1.628228 -1.125520
#Row_sum  0.461987  0.225310 -1.769627 -1.592595  1.652828 -1.022097
#==============================================================================


#==============================================================================
#Batch read the file, when the larger the data, the more optimized upgrade
now=datetime.datetime.now()
table_test=pd.read_sql_table("inventory_pipeline_temp",engine_df,chunksize=10000)
chunks=[]
for i in table_test:
    chunks.append(i)
df=pd.concat(chunks,ignore_index=True)        
result=datetime.datetime.now()
print(str(result-now))
#==============================================================================


#==============================================================================
df.info()
#查看数据类型及内存使用情况#
#==============================================================================

#==============================================================================
# 保留小数点两位
#方法一
df['A']=df['A'].map('{:,.0f}'.format) #所有的保留两位小数点
#方法二
df[['A','B']]=np.round([['A','B']].decimals=2)#没有超过两位小数点默认保留一位，其余保留两位
df[['A','B']]=df[['A','B']].apply(lambda x:pd.Series.round(x,3))#直接在原表进行更改
#方法三
df.round(2)#整体保留两位小数点
df1=df.round({'A':2,'B':3})#指定列保留小数点（不会改变原表，需另赋值）
#==============================================================================

#==============================================================================
# 移除重复数据(不会改变原表,如果两笔都是相同的，则保留第一笔)
data = pd.DataFrame({'k1': ['one'] * 3 + ['two'] * 4,
                  'k2': [1, 1, 2, 3, 3, 4, 4]})
#判断各行是否是重复行
data.duplicated()#返回的布尔值
#移除重复hang
data.drop_duplicates()
#删除指定列的重复值
data.drop_duplicates(['k1'])
data.drop_duplicates(['k1'],keep='last')#相同的值保留最后一个
#==============================================================================

#==============================================================================
# 替换
#==============================================================================
df['A'] = df['A'].str.replace(',','.')
df['A'].str.contains('s')#匹配字符串#
